---
- hosts: all
  gather_facts: no
  tasks:
    - name: 🐍 Ensure Python is present
      raw: >
        test -x /usr/bin/python3 ||
        sudo apt-get update &&
        sudo apt-get -yq install python-simplejson

- hosts: all
  gather_facts: yes
  become: yes
  vars:
    # Generate an idempotent random port number in the range 1024-65535
    - openvpn_port: "{{ 65535 | random(1024, seed=client_file_name) }}"
    - openvpn_proto: udp
    - openvpn_key_size: 2048
    - client_file_name: "client.ovpn"
  tasks:
    - name: ⚙️  Provide proper `/etc/resolv.conf`
      copy:
        content: |
          nameserver 1.1.1.1
          nameserver 1.0.0.1
          options no-inet6 timeout:1 attempts:5
        dest: /etc/resolv.conf
    - name: ⚙️  Provide proper `/etc/hosts`
      copy:
        content: |
          127.0.0.1    localhost
          127.0.1.1    {{ inventory_hostname_short }} {{ inventory_hostname }}
        dest: /etc/hosts
    - name: ⚙️  Set hostname
      hostname: name={{ inventory_hostname }}
    - name: ⚙️  Upgrade the system
      apt: upgrade=dist
    - name: ⚙️  Ensure required packages installed
      apt:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        purge: "{{ item.purge | default(omit) }}"
        update_cache: yes
      loop:
        - { name: resolvconf, state: absent, purge: yes }
        - { name: openvpn, state: present }
        - { name: easy-rsa, state: present }
    - name: ⚙️  Provide openvpn user
      user: name=openvpn shell=/bin/bash home=/etc/openvpn system=yes
    - name: ⚙️  Ensure openvpn directories exist
      file: name=/etc/openvpn/keys state=directory
    - name: ⚙️  Ensure openssl symlink exist
      file:
        src: /usr/share/easy-rsa/openssl-1.0.0.cnf
        dest: /usr/share/easy-rsa/openssl.cnf
        state: link
    - name: ⚙️  Ensure sysctls are set
      sysctl: name={{ item }} value=1 state=present sysctl_set=yes reload=yes
      with_items:
        - net.ipv4.ip_forward
        - net.ipv6.conf.all.disable_ipv6
        - net.ipv6.conf.default.disable_ipv6
        - net.ipv6.conf.lo.disable_ipv6
        - net.ipv6.conf.{{ ansible_default_ipv4.interface }}.disable_ipv6
    - name: ⚙️  Ensure firewall rules are set
      copy:
        content: |
          #!/sbin/iptables-restore
          *filter
          :INPUT DROP
          :FORWARD DROP
          :OUTPUT ACCEPT
          -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          -A INPUT -i lo -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
          -A INPUT -p {{ openvpn_proto }} -m {{ openvpn_proto }} --dport {{ openvpn_port }} -j ACCEPT
          -A INPUT -p icmp -j ACCEPT
          -A FORWARD -i tun+ -j ACCEPT
          -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          COMMIT
          *nat
          :PREROUTING ACCEPT
          :INPUT ACCEPT
          :OUTPUT ACCEPT
          :POSTROUTING ACCEPT
          -A POSTROUTING -o {{ ansible_default_ipv4.interface }} -j MASQUERADE
          COMMIT
        dest: /etc/network/if-up.d/iptables-rules
        mode: 0755
      notify: apply firewall
    - name: 📁 Generate openvpn variables
      copy:
        content: |
          export EASY_RSA="/usr/share/easy-rsa"
          export KEY_CONFIG="$EASY_RSA/openssl.cnf"
          export KEY_DIR="/etc/openvpn/keys"
          export KEY_SIZE={{ openvpn_key_size }}
          export CA_EXPIRE=3650
          export KEY_EXPIRE=3650
          export KEY_COUNTRY="US"
          export KEY_PROVINCE="XX"
          export KEY_CITY="Racoon"
          export KEY_ORG="Acme"
          export KEY_EMAIL="mail@acme.tld"          
        dest: /usr/share/easy-rsa/vars
    - name: 📁 Generate openvpn server config
      copy:
        content: |
          mode server
          tls-server
          daemon
          proto {{ openvpn_proto }}
          port {{ openvpn_port }}
          dev tun
          tls-auth /etc/openvpn/keys/ta.key 0
          ca /etc/openvpn/keys/ca.crt
          cert /etc/openvpn/keys/server.crt
          key /etc/openvpn/keys/server.key
          dh /etc/openvpn/keys/dh{{ openvpn_key_size }}.pem
          server 10.10.10.0 255.255.255.0
          push "redirect-gateway def1"
          duplicate-cn
          keepalive 10 120
          mssfix 1420
          persist-key
          persist-tun
          auth SHA512
          tls-version-min 1.2
          tls-cipher TLS-DHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256
          user openvpn
          group openvpn
          verb 0          
        dest: /etc/openvpn/server.conf
      notify: start openvpn
    - name: 📁 Check server builder
      stat: path=/usr/share/easy-rsa/build-server-keys
      register: sbuilder
    - name: 📁 Build server certificates
      copy:
        content: |
          #!/bin/bash
          source /usr/share/easy-rsa/vars
          /usr/share/easy-rsa/clean-all
          openvpn --genkey --secret /etc/openvpn/keys/ta.key
          /usr/bin/openssl dhparam -out ${KEY_DIR}/dh${KEY_SIZE}.pem ${KEY_SIZE}
          /usr/share/easy-rsa/pkitool --initca
          /usr/share/easy-rsa/pkitool --server server          
        dest: /usr/share/easy-rsa/build-server-keys
        mode: 0755
      notify: build server keys
      when: sbuilder.stat.exists == False

    - block:
        - name: 📄 Check client builder
          stat: path=/usr/share/easy-rsa/build-client-keys
          register: cbuilder

        - name: 📄 Build client certificates
          copy:
            content: |
              #!/bin/bash
              source /usr/share/easy-rsa/vars
              /usr/share/easy-rsa/pkitool $1              
            dest: /usr/share/easy-rsa/build-client-keys
            mode: 0755
          when: cbuilder.stat.exists == False

        - name: 📄 Generate client certificate
          shell: /usr/share/easy-rsa/build-client-keys {{ clientname }}

        - name: ⚙️  Get public IP
          ipify_facts:
        - name: 📄 Generate client config
          copy:
            content: |
              client
              tls-client
              dev tun
              proto {{ openvpn_proto }}
              remote {{ ipify_public_ip }} {{ openvpn_port }}
              resolv-retry infinite
              nobind
              persist-key
              persist-tun
              remote-cert-tls server
              auth SHA512
              mssfix 1420
              verb 3
              key-direction 1
              <ca>
              </ca>
              <cert>
              </cert>
              <key>
              </key>
              <tls-auth>
              </tls-auth>              
            dest: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}

        - name: 📩 Get ca.crt
          slurp: src=/etc/openvpn/keys/ca.crt
          register: cacrt
        - name: 📩 Get {{ clientname }}.crt
          slurp: src=/etc/openvpn/keys/{{ clientname }}.crt
          register: clientcrt
        - name: 📩 Get {{ clientname }}.key
          slurp: src=/etc/openvpn/keys/{{ clientname }}.key
          register: clientkey
        - name: 📩 Get ta.key
          slurp: src=/etc/openvpn/keys/ta.key
          register: takey

        - name: 📨 Writing ca.crt
          blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}
            insertafter: "<ca>"
            block: "{{ cacrt['content'] | b64decode }}"
            marker: "# {mark} ca.crt"
            marker_begin: Begin
            marker_end: End

        - name: 📨 Writing client.crt
          blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}
            insertafter: "<cert>"
            block: "{{ clientcrt['content'] | b64decode }}"
            marker: "# {mark} client.crt"
            marker_begin: Begin
            marker_end: End

        - name: 📨 Writing client.key
          blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}
            insertafter: "<key>"
            block: "{{ clientkey['content'] | b64decode }}"
            marker: "# {mark} client.key"
            marker_begin: Begin
            marker_end: End

        - name: 📨 Writing ta.key
          blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}
            insertafter: "<tls-auth>"
            block: "{{ takey['content'] | b64decode }}"
            marker: "# {mark} ta.key"
            marker_begin: Begin
            marker_end: End

        - name: 🧾 Getting your new openvpn client config
          fetch:
            src: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}
            dest: ./{{ clientname }}-{{ client_file_name }}
            flat: yes

        - name: ⚙️  Cleanup remote client configs
          file:
            path: /etc/openvpn/keys/{{ clientname }}-{{ client_file_name }}
            state: absent

      when: clientname is defined
      tags: client

  handlers:
    - name: apply firewall
      command: /etc/network/if-up.d/iptables-rules
    - name: build server keys
      shell: /usr/share/easy-rsa/build-server-keys
    - name: start openvpn
      systemd: name=openvpn@server state=restarted
