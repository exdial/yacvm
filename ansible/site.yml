---
- hosts: all
  gather_facts: false
  tasks:

    - name: Ensure openvpn_port is a number
      assert:
        that:
          - openvpn_port is regex("^[0-9]+$")

    - name: Wait for server to become available after terraforming
      ansible.builtin.wait_for_connection:
        timeout: 600

- hosts: all
  gather_facts: true
  become: true
  vars:
    openvpn_proto: udp
    openvpn_key_size: 2048
  tasks:

    - name: ‚öôÔ∏è  Ensure `/etc/resolv.conf` is configured
      ansible.builtin.copy:
        content: |
          nameserver 1.1.1.1
          nameserver 1.0.0.1
          options no-inet6 timeout:1 attempts:5
        dest: /etc/resolv.conf

    - name: ‚öôÔ∏è  Ensure `/etc/hosts` is configured
      ansible.builtin.copy:
        content: |
          127.0.0.1    localhost
          127.0.1.1    {{ inventory_hostname_short }} {{ inventory_hostname }}
        dest: /etc/hosts

    - name: ‚öôÔ∏è  Ensure hostname is correct
      ansible.builtin.hostname: name={{ inventory_hostname }}

    - name: ‚öôÔ∏è  Ensure required packages installed
      ansible.builtin.apt:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        purge: "{{ item.purge | default(omit) }}"
        update_cache: true
      loop:
        - {name: resolvconf, state: absent, purge: true}
        - {name: openvpn, state: present}
        - {name: easy-rsa, state: present}

    - name: ‚öôÔ∏è  Ensure OpenVPN user exists
      ansible.builtin.user:
        name: openvpn
        shell: /bin/bash
        home: /etc/openvpn
        system: true

    - name: ‚öôÔ∏è  Ensure OpenVPN directories exist
      ansible.builtin.file:
        name: /etc/openvpn/keys
        state: directory

    - name: ‚öôÔ∏è  Ensure OpenSSL symlink exist
      ansible.builtin.file:
        src: /usr/share/easy-rsa/openssl-1.0.0.cnf
        dest: /usr/share/easy-rsa/openssl.cnf
        state: link

    - name: ‚öôÔ∏è  Ensure sysctl entries are set
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: 1
        state: present
        sysctl_set: true
        reload: true
      with_items:
        - net.ipv4.ip_forward
        - net.ipv6.conf.all.disable_ipv6
        - net.ipv6.conf.default.disable_ipv6
        - net.ipv6.conf.lo.disable_ipv6
        - net.ipv6.conf.{{ ansible_default_ipv4.interface }}.disable_ipv6

    - name: ‚öôÔ∏è  Ensure firewall rules are set
      ansible.builtin.copy:
        content: |
          #!/sbin/iptables-restore
          *filter
          :INPUT DROP
          :FORWARD ACCEPT
          :OUTPUT ACCEPT
          -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          -A INPUT -i lo -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
          -A INPUT -p {{ openvpn_proto }} -m {{ openvpn_proto }} --dport {{ openvpn_port }} -j ACCEPT
          -A INPUT -p icmp -j ACCEPT
          -A FORWARD -i tun+ -j ACCEPT
          -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          COMMIT
          *nat
          :PREROUTING ACCEPT
          :INPUT ACCEPT
          :OUTPUT ACCEPT
          :POSTROUTING ACCEPT
          -A POSTROUTING -o {{ ansible_default_ipv4.interface }} -j MASQUERADE
          COMMIT
        dest: /etc/network/if-up.d/iptables-rules
        mode: 0755
      notify: Apply firewall rules

    - name: Ensure the server is marked as provisioned
      ansible.builtin.file:
        path: /.holtzman-effect
        state: touch
        owner: root
        group: root
        mode: 0644

    - name: üìÅ Ensure OpenVPN variables file configured properly
      ansible.builtin.copy:
        content: |
          export EASY_RSA="/usr/share/easy-rsa"
          export KEY_CONFIG="$EASY_RSA/openssl.cnf"
          export KEY_DIR="/etc/openvpn/keys"
          export KEY_SIZE={{ openvpn_key_size }}
          export CA_EXPIRE=3650
          export KEY_EXPIRE=3650
          export KEY_COUNTRY="US"
          export KEY_PROVINCE="XX"
          export KEY_CITY="Racoon"
          export KEY_ORG="Acme"
          export KEY_EMAIL="mail@acme.tld"
        dest: /usr/share/easy-rsa/vars

    - name: üìÅ Generate OpenVPN server config
      ansible.builtin.copy:
        content: |
          mode server
          tls-server
          daemon
          proto {{ openvpn_proto }}
          port {{ openvpn_port }}
          dev tun
          tls-auth /etc/openvpn/keys/ta.key 0
          ca /etc/openvpn/keys/ca.crt
          cert /etc/openvpn/keys/server.crt
          key /etc/openvpn/keys/server.key
          dh /etc/openvpn/keys/dh{{ openvpn_key_size }}.pem
          server 10.10.10.0 255.255.255.0
          push "redirect-gateway def1"
          duplicate-cn
          keepalive 10 120
          mssfix 1420
          persist-key
          persist-tun
          auth SHA512
          tls-version-min 1.2
          tls-cipher TLS-DHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256
          user openvpn
          group openvpn
          verb 0
        dest: /etc/openvpn/server.conf
      notify: Start OpenVPN

    - name: üìÅ Generate a server certificates builder and only run it once
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          source /usr/share/easy-rsa/vars
          /usr/share/easy-rsa/clean-all
          openvpn --genkey --secret /etc/openvpn/keys/ta.key
          /usr/bin/openssl dhparam -out ${KEY_DIR}/dh${KEY_SIZE}.pem ${KEY_SIZE}
          /usr/share/easy-rsa/pkitool --initca
          /usr/share/easy-rsa/pkitool --server server
        dest: /usr/share/easy-rsa/build-server-keys
        mode: 0755
        force: false
      notify: Build server keys

    - name: üìÑ Generate a client certificates builder and run it on demand
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          source /usr/share/easy-rsa/vars
          /usr/share/easy-rsa/pkitool $1
        dest: /usr/share/easy-rsa/build-client-keys
        mode: 0755
        force: false

    - block:
        - name: üìÑ Generate OpenVPN client certificate
          ansible.builtin.command: /usr/share/easy-rsa/build-client-keys {{ clientname }}

        - name: ‚öôÔ∏è  Getting a public IP
          community.general.ipify_facts:

        - name: üìÑ Generate OpenVPN client config
          ansible.builtin.copy:
            content: |
              client
              tls-client
              dev tun
              proto {{ openvpn_proto }}
              remote {{ ipify_public_ip }} {{ openvpn_port }}
              resolv-retry infinite
              nobind
              persist-key
              persist-tun
              remote-cert-tls server
              auth SHA512
              mssfix 1420
              verb 3
              key-direction 1
              <ca>
              </ca>
              <cert>
              </cert>
              <key>
              </key>
              <tls-auth>
              </tls-auth>
            dest: /etc/openvpn/keys/{{ clientname }}.ovpn

        - name: üì© Slurp ca.crt
          ansible.builtin.slurp: src=/etc/openvpn/keys/ca.crt
          register: cacrt

        - name: üì© Slurp {{ clientname }}.crt
          ansible.builtin.slurp: src=/etc/openvpn/keys/{{ clientname }}.crt
          register: clientcrt

        - name: üì© Slurp {{ clientname }}.key
          ansible.builtin.slurp: src=/etc/openvpn/keys/{{ clientname }}.key
          register: clientkey

        - name: üì© Slurp ta.key
          ansible.builtin.slurp: src=/etc/openvpn/keys/ta.key
          register: takey

        - name: üì® Injecting ca.crt into final user config
          ansible.builtin.blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}.ovpn
            insertafter: "<ca>"
            block: "{{ cacrt['content'] | b64decode }}"
            marker: "# {mark} ca.crt"
            marker_begin: Begin
            marker_end: End

        - name: üì® Injecting client.crt into final user config
          ansible.builtin.blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}.ovpn
            insertafter: "<cert>"
            block: "{{ clientcrt['content'] | b64decode }}"
            marker: "# {mark} client.crt"
            marker_begin: Begin
            marker_end: End

        - name: üì® Injecting client.key into final user config
          ansible.builtin.blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}.ovpn
            insertafter: "<key>"
            block: "{{ clientkey['content'] | b64decode }}"
            marker: "# {mark} client.key"
            marker_begin: Begin
            marker_end: End

        - name: üì® Injecting ta.key into final user config
          ansible.builtin.blockinfile:
            path: /etc/openvpn/keys/{{ clientname }}.ovpn
            insertafter: "<tls-auth>"
            block: "{{ takey['content'] | b64decode }}"
            marker: "# {mark} ta.key"
            marker_begin: Begin
            marker_end: End

        - name: üßæ Downloading a final OpenVPN client config
          ansible.builtin.fetch:
            src: /etc/openvpn/keys/{{ clientname }}.ovpn
            dest: ../_output/{{ clientname }}.ovpn
            flat: true

        - name: üßπ Cleanup remote client configs
          ansible.builtin.file:
            path: /etc/openvpn/keys/{{ clientname }}.ovpn
            state: absent

      when: clientname is defined
      tags: client

  handlers:
    - name: Apply firewall rules
      command: /etc/network/if-up.d/iptables-rules
    - name: Build server keys
      command: /usr/share/easy-rsa/build-server-keys
    - name: Start OpenVPN
      systemd: name=openvpn@server state=restarted
